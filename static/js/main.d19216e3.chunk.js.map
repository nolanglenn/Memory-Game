{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","components/Wrapper/index.js","components/CharacterCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","score","topScore","Jumbotron","Wrapper","children","CharacterCard","onClick","alt","name","src","image","App","state","characters","shuffleCards","arr","_this","i","length","j","Math","floor","random","_ref","setState","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","character","components_CharacterCard","id","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"63DAceA,MAVf,SAAgBC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gEACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeC,KAAK,sBAAlC,gBACAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBC,KAAK,sBAA1C,2BACAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeC,KAAK,sBAAlC,UAA+DL,EAAMM,MAArE,iBAA0FN,EAAMO,kBCK7FC,MAXf,SAAmBR,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,2BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qFCDDK,MAJf,SAAiBT,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,iBCQ1BC,MARf,SAAuBX,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKS,QAASZ,EAAMY,QAASR,UAAU,kBACnCH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,iBCgE9BC,6MA9DbC,MAAQ,CACNC,gBAwBFC,aAAe,WAEb,IADA,IAAIC,EAAMC,EAAKJ,MAAMC,WACZI,EAAIF,EAAIG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADHM,EAEpB,CAACR,EAAII,GAAIJ,EAAIE,IAA/BF,EAAIE,GAFkCM,EAAA,GAE9BR,EAAII,GAF0BI,EAAA,GAIzCP,EAAKQ,SAAS,CACZX,WAAYE,6EAIP,IAAAU,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,KACGH,KAAKd,MAAMC,WAAWiB,IAAI,SAAAC,GAAS,OAClCpC,EAAAC,EAAAC,cAACmC,EAAD,CACEC,GAAIF,EAAUE,GACdzB,KAAMuB,EAAUvB,KAChBE,MAAOqB,EAAUrB,MACjBwB,IAAKH,EAAUE,GAEf3B,QAAS,WAEPmB,EAAKX,6BArDHqB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d19216e3.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark navbar-fixed-top\">\n            <h1 className=\"navbar-brand\" href=\"../../..index.html\">Memory Game!</h1>\n            <h1 className=\"navbar-brand mx-auto\" href=\"../../..index.html\">Click an image to begin</h1>\n            <h1 className=\"navbar-brand\" href=\"../../..index.html\">Score: {props.score} | Top score: {props.topScore}</h1>\n        </nav>\n    )\n}\n\nexport default Navbar","import React from 'react'\nimport './style.css'\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Twin Peaks Memory Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from 'react'\nimport './style.css'\n\n\nfunction CharacterCard(props) {\n    return (\n        <div onClick={props.onClick} className=\"character-card\">\n            <img alt={props.name} src={props.image} />\n        </div> \n    )\n}\n\nexport default CharacterCard","import React from 'react';\nimport Navbar from './components/Navbar/index'\nimport Jumbotron from './components/Jumbotron';\nimport Wrapper from './components/Wrapper'\nimport CharacterCard from './components/CharacterCard';\nimport characters from './characters.json'\n\nclass App extends React.Component {\n\n  state = {\n    characters\n  }\n\n  // didComponentUpdate might work for running the shufflecards function\n  // componentDidUpdate = () => {\n\n  // }\n\n  // updateCharacter = id => {\n  //   let character = this.state.characters[id]\n  //   console.log(character.isClicked)\n  //   // Checks to see if the character has been guessed. If not, the game will reset\n  //   if(character.isClicked === 'false') {\n  //     character.isClicked = 'true'\n  //     console.log(character.isClicked)\n  //   } else if(character.isClicked === 'true'){\n  //     this.state.characters.forEach(character => {\n  //       character.isClicked = 'false'\n  //     });\n  //     alert('You guessed that character already! Try again.');\n  //   }\n  // }\n\n  // Randomly shuffle the card order\n  shuffleCards = () => {\n    let arr = this.state.characters;\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    this.setState({\n      characters: arr\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.characters.map(character => (\n            <CharacterCard \n              id={character.id}\n              name={character.name}\n              image={character.image}\n              key={character.id}\n              // onClick must be defined as a prop if you're calling it on a Component you made\n              onClick={() => {\n                // this.updateCharacter(character.id)\n                this.shuffleCards()\n              }}\n            />\n          )\n          )}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}